#+TITLE: Readme

Pytorch has a complex compatibility table:

| Pytorch version | Compatible CUDA versions | Python versions    |
|-----------------+--------------------------+--------------------|
|             1.4 | 9.2, 10.1                | 2.7, 3.5 -- 3.8    |
|             1.5 | 9.2, 10.1, 10.2          | 2.7, 3.5 -- 3.8    |
|             1.6 | 9.2, 10.1, 10.2          | 3.6, 3.7, 3.8      |
|             1.7 | 9.2, 10.1, 10.2, 11.0    | 3.6, 3.7, 3.8      |
|             1.8 | 10.1, 10.2, 11.1         | 3.6, 3.7, 3.8, 3.9 |

| Python versions | CUDA version | Pytorch versions |
|-----------------+--------------+------------------|
| 3.6 -- 3.8      |          9.2 |       1.4 -- 1.7 |
| 3.6 -- 3.8      |         10.1 |       1.4 -- 1.8 |
| 3.6 -- 3.8      |         10.2 |       1.5 -- 1.8 |
| 3.6 -- 3.8      |         11.0 |              1.7 |
| 3.6 -- 3.8      |         11.1 |              1.8 |
| 3.9             |         10.1 |              1.8 |
| 3.9             |         10.2 |              1.8 |
| 3.9             |         11.1 |              1.8 |

Check https://download.pytorch.com/whl/torch_stable.html to see all installable
versions.


* How to build locally
As of 2023-02-23, the most recent version of cudatoolkit-dev on conda-forge is 
11.6.0. It would not compile, with more recent versions of gcc. Version 11.6.2
or later would solve the problem, but none of them is available.
Moreover, PyTorch 1.13 was compiled against cuda 11.2. Thus, we prefer to stick
to this version for the moment.
Some of these steps could be automated, but for now they are simple enough.

#+begin_src bash
conda create -n compile_msd python=3.9 conda-build anaconda-client
conda activate compile_msd
conda install cudatoolkit-dev=11.2

export CUDA_HOME=<your_env_path>
export cudatoolkit=11.2
export MAX_JOBS=<your_CPU_count>
export TORCH_CUDA_ARCH_LIST="5.0 6.0 7.0 7.5 8.0 8.6+PTX"

conda build .
#+end_src



* How to build using docker

From the project root directory execute:

#+begin_src bash
mkdir -p build/out

MOUNTS="-v ${PWD}/build/out/:/opt/conda/conda-bld/linux-64/ -v ${PWD}/:/msd_build_dir/ -v pkgs:/opt/conda/pkgs"
export CUDA_HOME=/usr/local/cuda-9.2/
export TORCH_CUDA_ARCH_LIST="3.5 5.2 6.0 6.1 7.0+PTX"
export cudatoolkit=9.2

sudo docker run -e CUDA_HOME=${CUDA_HOME} -e TORCH_CUDA_ARCH_LIST="${TORCH_CUDA_ARCH_LIST}" -e cudatoolkit=${cudatoolkit} $MOUNTS -w /msd_build_dir/ msd-build-env /opt/conda/bin/conda mambabuild conda/ -c aahendriksen -c pytorch -c defaults -c conda-forge -m conda/cuda-9.2.yaml
#+end_src
** For testing
Using ~test.yaml~
#+begin_src bash
mkdir -p conda_docker_out

export cudatoolkit=10.2
export CUDA_HOME=/usr/local/cuda-${cudatoolkit}/
export TORCH_CUDA_ARCH_LIST="3.5 5.2 6.0 6.1 7.0+PTX"
export MAX_JOBS=4

MOUNTS="-v ${PWD}/conda_docker_out/:/opt/conda/conda-bld/linux-64/ -v ${PWD}/:/msd_build_dir/ -v pkgs:/opt/conda/pkgs"

sudo docker run -e CUDA_HOME=${CUDA_HOME} -e TORCH_CUDA_ARCH_LIST="${TORCH_CUDA_ARCH_LIST}" -e cudatoolkit=${cudatoolkit} -e MAX_JOBS=${MAX_JOBS} $MOUNTS -w /msd_build_dir/ msd-build-env /opt/conda/bin/conda mambabuild conda/ -c aahendriksen -c pytorch -c defaults -c conda-forge -m conda/test.yaml
#+end_src



#+begin_src bash
mkdir -p conda_docker_out

MOUNTS="-v ${PWD}/conda_docker_out/:/opt/conda/conda-bld/linux-64/ -v ${PWD}/:/msd_build_dir/ -v pkgs:/opt/conda/pkgs"
export cudatoolkit=9.2
export CUDA_HOME=/usr/local/cuda-${cudatoolkit}/
export TORCH_CUDA_ARCH_LIST="3.5 5.2 6.0 6.1 7.0+PTX"

sudo docker run -e CUDA_HOME=${CUDA_HOME} -e TORCH_CUDA_ARCH_LIST="${TORCH_CUDA_ARCH_LIST}" -e cudatoolkit=${cudatoolkit} $MOUNTS -w /msd_build_dir/ msd-build-env /opt/conda/bin/conda mambabuild conda/ -c aahendriksen -c pytorch -c defaults -c conda-forge -m conda/cuda-9.2.yaml
#+end_src



* How to create the docker container
First, download all versions of the cuda toolkit:

#+begin_src bash
cd conda/build_env
bash ./download_cuda_environments.sh
#+end_src

Then, build the docker container. This can take a while.. The final image will
be roughly 25GB.
#+begin_src bash
cd conda/build_env
sudo DOCKER_BUILDKIT=1 docker build -t msd-build-env ./
#+end_src

If you are on a recent version of Docker (> 18.9), then you can use the buildkit
backend which is considerably more efficient. See
- [[https://www.cloudsavvyit.com/10271/understanding-the-docker-build-context-why-you-should-use-dockerignore/][Understanding the Docker Build Context (Why You Should Use Dockerignore) â€“ CloudSavvy IT]]
- [[https://docs.docker.com/engine/reference/builder/#buildkit][Dockerfile reference | Docker Documentation]]
